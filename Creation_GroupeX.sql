/*
FIchier : Creation_GroupeX.sql
Auteurs :
Melvin Bardin 21601814
Malika Lin-Wee-Kuan 21611423
Mael Bonneaud 21915734

Nom du groupe : X


Nom du groupe : Groupe X
*/



/*
A METTTRE OBLIGATOIREMENT AU DEBUT 
- SUPPRESSION DE LA BASE DE DONNEES
- CREATION DE LA BASE DE DONNEES
- SUPPRESSIONS DE TOUTES LES BASES CREEES POUR LE PROJET
*/

DROP DATABASE IF EXISTS BDEVENEMENT;
CREATE DATABASE BDEVENEMENT;
USE BDEVENEMENT;


/*bbd melvin*/
/*USE e20160000668;*/

/*bdd malika */
/*USE e20160008843;*/

/*bdd mael*/
/*USE e20190012344;*/
/*

Création de la base de  données
*/
/*USE ma_base;
*/

DROP VIEW  IF EXISTS ADMINISTRATEUR;
DROP VIEW IF EXISTS CONTRIBUTEUR;
DROP VIEW IF EXISTS VISITEUR;

DROP TABLE  IF EXISTS LOGERROR;

/*suppression des associations*/
DROP TABLE  IF EXISTS CARACTERISE;
DROP TABLE  IF EXISTS PARTICIPE;

/*Suppression des entités*/
DROP TABLE  IF EXISTS PERSONNE;
DROP TABLE  IF EXISTS EVENEMENT; 
DROP TABLE  IF EXISTS THEME;



/*RAJOUTER LES ASSOTIATIONS */


CREATE TABLE PERSONNE(
	ID_PERS INT(5) NOT NULL AUTO_INCREMENT,
	PSEUDO VARCHAR(50) NOT NULL,
	MDP VARCHAR(50) NOT NULL, 
	NOM VARCHAR(50), 
	PRENOM VARCHAR(50),	
/*	ADR VARCHAR(50),*/
	AGE INT(5),
	GRADE VARCHAR(50),
	CONSTRAINT PK_PERSONNE PRIMARY KEY (ID_PERS),
	CONSTRAINT CHECK_GRADE CHECK (GRADE IN('ADMINISTRATEUR','CONTRIBUTEUR','VISITEUR'))
);

CREATE TABLE EVENEMENT(
	ID_EVENEMENT INT(5) AUTO_INCREMENT,
	NOM VARCHAR(30) NOT NULL,
	DATES DATE,
	ADRESSE VARCHAR(50),
	COORD_LONG VARCHAR(50),
	COORD_LAT VARCHAR(50),	
	NOTE INT, /* CONDITION 0<NOTE <20*/
	EFF_MAX INT(4),
	DESCRIPTION VARCHAR(50),
	CONSTRAINT PK_EVENEMENT PRIMARY KEY (ID_EVENEMENT),
	CONSTRAINT CHECK_NOTE CHECK ( NOTE<=20 && NOTE >= 0)
/* 	DUREE INT */
	
/*	 EFFECTIF MIN / MAX  */

	
);

CREATE TABLE THEME(
	ID_THEME INT(5) AUTO_INCREMENT,
	NOM VARCHAR(30),
	CONSTRAINT PK_THEME PRIMARY KEY (ID_THEME)
);

CREATE TABLE CARACTERISE(
	ID_THEME INT(5),
	ID_EVENEMENT INT(5),
	CONSTRAINT FK_CARACTERISE_ID_THEME FOREIGN KEY (ID_THEME) REFERENCES THEME(ID_THEME),
	CONSTRAINT FK_CARACTERISE_ID_EVENEMENT FOREIGN KEY (ID_EVENEMENT) REFERENCES EVENEMENT(ID_EVENEMENT) ON DELETE CASCADE,
	CONSTRAINT PK_CARACTERISE PRIMARY KEY (ID_THEME,ID_EVENEMENT)
);
	
CREATE TABLE PARTICIPE(
	ID_PERS INT(5),
	ID_EVENEMENT INT(5),
	NOTE_PERSO INT,
	CONSTRAINT CHK_NOTE CHECK ( NOTE_PERSO<=20 && NOTE_PERSO >= 0),
	CONSTRAINT FK_PARTICIPE_ID_PERS FOREIGN KEY (ID_PERS) REFERENCES PERSONNE(ID_PERS)  ON DELETE CASCADE,
	CONSTRAINT FK_PARTICIPE_ID_EVENEMENT FOREIGN KEY (ID_EVENEMENT) REFERENCES EVENEMENT(ID_EVENEMENT) ON DELETE CASCADE,
	CONSTRAINT PK_PARTICIPE PRIMARY KEY (ID_PERS,ID_EVENEMENT)

);



CREATE TABLE LOGERROR  (
  ID INT(11) AUTO_INCREMENT,
  MESSAGE VARCHAR(255) DEFAULT NULL,
  THETIME TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT PK_LOGERROR PRIMARY KEY (ID)
);	


/* AJOUTER LES ASSOTIATIONS, TRIGGER ETC... */

/*
Pour mettre les dates au format jj-mm-aaaa
*/

/*ALTER session SET NLS_DATE_FORMAT='DD/MM/YYYY';*/

/*SET LINESIZE 90;
SET PAGESIZE 30;*/


/*VIEW*/

CREATE VIEW ADMINISTRATEUR AS
SELECT ID_PERS,PSEUDO, NOM, PRENOM , AGE, GRADE 
FROM PERSONNE P1 
/*WHERE P1.GRADE = "ADMINISTRATEUR"*/
WITH CHECK OPTION;




CREATE VIEW CONTRIBUTEUR AS
SELECT ID_PERS,PSEUDO, NOM, PRENOM , AGE
FROM PERSONNE
WHERE GRADE = "CONTRIBUTEUR"
WITH CHECK OPTION;



CREATE VIEW VISITEUR AS
SELECT ID_PERS,PSEUDO, NOM, PRENOM , AGE
FROM PERSONNE
WHERE GRADE = "VISITEUR"
WITH CHECK OPTION;





/*
procedure
*/



DROP PROCEDURE IF EXISTS CALCUL_NOTE;
DROP PROCEDURE IF EXISTS EVENEMENT_VERIF;
DROP PROCEDURE IF EXISTS PROCEDURE_VERIF;
DROP PROCEDURE IF EXISTS PARTICIPE_VERIF;
DROP PROCEDURE IF EXISTS EFFECTIF_MAX;

DROP TRIGGER IF EXISTS EVENEMENT_INSERT;
DROP TRIGGER IF EXISTS EVENEMENT_UPDATE;
DROP TRIGGER IF EXISTS PARTICIPE_UPDATE;
DROP TRIGGER IF EXISTS PARTICIPE_INSERT;

drop trigger if exists PARTICIPE_AFTER_INSERT;
drop trigger if exists PARTICIPE_AFTER_UPDATE;
drop trigger if exists PARTICIPE_AFTER_DELETE;



DELIMITER |




CREATE PROCEDURE CALCUL_NOTE(id_event int(5))
BEGIN

update EVENEMENT
set note = (SELECT avg(note_perso) FROM participe where id_evenement = id_event)
where id_evenement = id_event;

END |



CREATE PROCEDURE EFFECTIF_MAX(ID_EVENT INT(5),eff_max int(4))
BEGIN
IF( eff_max	<=  (SELECT COUNT(*) FROM PARTICIPE WHERE ID_EVENEMENT=ID_EVENT) )
THEN
INSERT INTO LOGERROR(MESSAGE) VALUES ('EFFECTIF MAX DEPASSE');
	
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 
		'effectif max depasse';
END IF;

END |







/*
procédure permettant de verifier l'integrité de la table evenement
*/
CREATE PROCEDURE EVENEMENT_VERIF( in nom varchar(30),
								  in COORD_LONG varchar(50),
								  in COORD_LAT varchar(50),
								  in dates date, 
								  in adresse varchar(50),
								  in note int)

BEGIN
	IF( NOM IS NULL 
		OR COORD_LONG IS NULL
		OR COORD_LAT IS NULL
		OR DATES IS NULL
		OR ADRESSE IS NULL
		)
		THEN

		INSERT INTO LOGERROR(MESSAGE) VALUES ('PROBLEME DINTEGRITE DANS EVENEMENT');
		/*probleme, action bloquante*/ 
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 
		'Contrainte d integrité non respecté dans EVENEMENT';

/* il est incohérent d'avoir une note alors que l'evenement n'a pas encore eu lieu */
	ELSEIF( DATEDIFF(dates,CURDATE())>0 and note is not null )
	THEN 	
		INSERT INTO LOGERROR(MESSAGE) VALUES ('Note existante anterieur a la date de levenement');
	
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 
		'Note de l evenement existante anterieur a la date de levenement';


END IF;

END |


/*
procédure permettant de verifier l'integrité de la table participe
*/
CREATE PROCEDURE PARTICIPE_VERIF(ID_EVENT int(5), NOTE_PERSO int)

BEGIN


/* il est incohérent d'avoir une note alors que l'evenement n'a pas encore eu lieu */
IF( DATEDIFF((SELECT DATES FROM EVENEMENT WHERE EVENEMENT.ID_EVENEMENT= ID_EVENT),CURDATE())>0 and NOTE_PERSO is not null )
	THEN 	
		INSERT INTO LOGERROR(MESSAGE) VALUES ('Note existante anterieur a la date de levenement');
	
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 
		'Note personnelle existante anterieur a la date de levenement';
/*ELSEIF()
then
*/	
 		
END IF;


END |




/*
TRIGGER SUR TABLE EVENEMENT
*/


CREATE  TRIGGER EVENEMENT_UPDATE
BEFORE UPDATE ON EVENEMENT
FOR EACH ROW
BEGIN 

call EVENEMENT_VERIF(new.nom, new.COORD_LONG, new.COORD_LAT, new.dates, new.adresse,new.note);

CALL EFFECTIF_MAX(NEW.ID_EVENEMENT, new.EFF_MAX);

END |




CREATE  TRIGGER EVENEMENT_INSERT
BEFORE INSERT ON EVENEMENT
FOR EACH ROW
BEGIN 

call EVENEMENT_VERIF(new.nom, new.COORD_LONG, new.COORD_LAT, new.dates, new.adresse, new.note);

END |



/*
TRIGGER SUR TABLE PARTICIPE
*/


CREATE TRIGGER PARTICIPE_UPDATE
BEFORE UPDATE ON PARTICIPE
FOR EACH ROW
BEGIN

call PARTICIPE_VERIF(new.ID_EVENEMENT , new.NOTE_PERSO );

CALL EFFECTIF_MAX(NEW.ID_EVENEMENT,(SELECT EFF_MAX FROM EVENEMENT WHERE ID_EVENEMENT=new.ID_EVENEMENT));



END |




CREATE TRIGGER PARTICIPE_INSERT
BEFORE INSERT ON PARTICIPE
FOR EACH ROW
BEGIN

call PARTICIPE_VERIF(new.ID_EVENEMENT , new.NOTE_PERSO );
CALL EFFECTIF_MAX(NEW.ID_EVENEMENT,(SELECT EFF_MAX FROM EVENEMENT WHERE ID_EVENEMENT=new.ID_EVENEMENT));

END |



/*pour que le calcul soit correct, on effectue l'operation aprés les insertion*/
CREATE TRIGGER PARTICIPE_AFTER_INSERT
AFTER INSERT ON PARTICIPE
FOR EACH ROW
BEGIN
call CALCUL_NOTE(new.ID_EVENEMENT);

END |


CREATE TRIGGER PARTICIPE_AFTER_UPDATE
AFTER UPDATE ON PARTICIPE
FOR EACH ROW
BEGIN
if(old.ID_EVENEMENT = new.ID_EVENEMENT)
	then
	call CALCUL_NOTE(new.ID_EVENEMENT);
else
	call CALCUL_NOTE(old.ID_EVENEMENT);
	call CALCUL_NOTE(new.ID_EVENEMENT);
end if;


END |


CREATE TRIGGER PARTICIPE_AFTER_DELETE
AFTER DELETE ON PARTICIPE
FOR EACH ROW
BEGIN
call CALCUL_NOTE(old.ID_EVENEMENT);

END |








DELIMITER ;






/*
Effacer les anciennes valeurs des relations
*/

DELETE FROM PERSONNE;
DELETE FROM EVENEMENT;
DELETE FROM THEME;
DELETE FROM CARACTERISE;
DELETE FROM PARTICIPE;

/* INSERTIONS des table*/

INSERT INTO PERSONNE (PSEUDO, MDP, NOM, PRENOM, AGE, GRADE) VALUES ('Luzubal','mdp1','LEVEQUE','PIERRE',20,'VISITEUR');
INSERT INTO PERSONNE (PSEUDO, MDP, NOM, PRENOM, AGE, GRADE) VALUES ('Oxgurd','mdp2','DUPONT','MARIE',45,'ADMINISTRATEUR');
INSERT INTO PERSONNE (PSEUDO, MDP, NOM, PRENOM, AGE, GRADE) VALUES ('Giltmar','mdp3','RENARD','ALBERT',18,'CONTRIBUTEUR');
INSERT INTO PERSONNE (PSEUDO, MDP, NOM, PRENOM, AGE, GRADE) VALUES ('Numornel','mdp4','MARTIN','LOIC',8,'VISITEUR');
INSERT INTO PERSONNE (PSEUDO, MDP, NOM, PRENOM, AGE, GRADE) VALUES ('Tirwen','mdp5','DUPONT','ANTOINE',65,'CONTRIBUTEUR');
INSERT INTO PERSONNE (PSEUDO, MDP, NOM, PRENOM, AGE, GRADE) VALUES ('Urukagal','mdp6','DUPONT','SYLVIE',34,'VISITEUR');
INSERT INTO PERSONNE (PSEUDO, MDP, NOM, PRENOM, AGE, GRADE) VALUES ('Haughtreth','mdp7','DUPONT','JEAN',28,'ADMINISTRATEUR');
INSERT INTO PERSONNE (PSEUDO, MDP, NOM, PRENOM, AGE, GRADE) VALUES ('Portbrand','mdp8','MEUNIER','LUC',56,'VISITEUR');
INSERT INTO PERSONNE (PSEUDO, MDP, NOM, PRENOM, AGE, GRADE) VALUES ('Hawkvid','mdp9','LUCAS','PAUL',15,'VISITEUR');
INSERT INTO PERSONNE (PSEUDO, MDP, NOM, PRENOM, AGE, GRADE) VALUES ('Drossshall','mdp10','REVEST','ANNIE',75,'CONTRIBUTEUR');
INSERT INTO PERSONNE (PSEUDO, MDP, NOM, PRENOM, AGE, GRADE) VALUES ('Twigthon','mdp11','ANTON','JEANNE',42,'VISITEUR');

INSERT INTO PERSONNE (PSEUDO, MDP, NOM, PRENOM, AGE, GRADE) VALUES ('admin','admin','ADMIN','ADMIN',21,'ADMINISTRATEUR');
INSERT INTO PERSONNE (PSEUDO, MDP, NOM, PRENOM, AGE, GRADE) VALUES ('contributeur','contributeur','CONTRIBUTEUR','CONTRIBUTEUR',21,'CONTRIBUTEUR');
INSERT INTO PERSONNE (PSEUDO, MDP, NOM, PRENOM, AGE, GRADE) VALUES ('visiteur','visiteur','visiteur','visiteur',21,'VISITEUR');




INSERT INTO EVENEMENT (NOM, DATES, ADRESSE, COORD_LONG, COORD_LAT, EFF_MAX, DESCRIPTION) VALUES ('noel-party', '2019-12-24','chez moi', '3.885843', '43.621580','10', 'on va bien samuser');
INSERT INTO EVENEMENT (NOM, DATES, ADRESSE, COORD_LONG, COORD_LAT, EFF_MAX, DESCRIPTION) VALUES ('soirée musette', '2020-12-24','Corum', '3.882610', '43.613861','100', 'on va bien samuser');
INSERT INTO EVENEMENT (NOM, DATES, ADRESSE, COORD_LONG, COORD_LAT, EFF_MAX, DESCRIPTION) VALUES ('concert folk', '2018-10-14','port marianne', '3.901148', '43.601968','1000', 'on va bien samuser');
INSERT INTO EVENEMENT (NOM, DATES, ADRESSE, COORD_LONG, COORD_LAT, EFF_MAX, DESCRIPTION) VALUES ('concert percussion', '2022-11-14','port marianne', '3.901140', '43.601965','10', 'percussion a gogo');
INSERT INTO EVENEMENT (NOM, DATES, ADRESSE, COORD_LONG, COORD_LAT, EFF_MAX, DESCRIPTION) VALUES ('fête surprise', '2023-02-23','Corum', '3.882615', '43.613863','200', 'surprise !');


INSERT INTO PARTICIPE (ID_PERS, ID_EVENEMENT) VALUES (1,1);
INSERT INTO PARTICIPE (ID_PERS, ID_EVENEMENT) VALUES (4,3);
INSERT INTO PARTICIPE (ID_PERS, ID_EVENEMENT) VALUES (2,1);
INSERT INTO PARTICIPE (ID_PERS, ID_EVENEMENT) VALUES (4,2);
INSERT INTO PARTICIPE (ID_PERS, ID_EVENEMENT,NOTE_PERSO) VALUES (5,3,12);
INSERT INTO PARTICIPE (ID_PERS, ID_EVENEMENT, NOTE_PERSO) VALUES (3,3,6);

insert into theme (nom) values ('Sportif');
insert into theme (nom) values ('culturel');
insert into theme (nom) values ('educatif');

insert into caracterise (id_theme, id_evenement) values(1,2);
insert into caracterise (id_theme, id_evenement) values(2,3);
insert into caracterise (id_theme, id_evenement) values(3,1);


/* affichage des tables: */

select * from EVENEMENT;

select * from PERSONNE;

select * from PARTICIPE;

select * from theme;

select * from caracterise;

select * from LOGERROR; 

















